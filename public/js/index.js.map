{
    "version": 3,
    "sources": [
        "lib/console.ts",
        "lib/global.ts",
        "lib/microservice.ts",
        "lib/subscriber.ts",
        "lib/util.ts",
        "microservice/sample/service.ts",
        "microservice/sample/test.ts"
    ],
    "names": [],
    "mappings": "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",
    "file": "index.js",
    "sourcesContent": [
        "/*\n * The MIT License (MIT)\n * Copyright (c) 2017 Heat Ledger Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * */\nclass Console {\n  public log(message: string) {\n    heat.logger.info(message);    \n  }\n}",
        "/*\n * The MIT License (MIT)\n * Copyright (c) 2017 Heat Ledger Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * */\nvar console = new Console();\n\n/* Java Class constants that expose static methods */\nvar Long: Java.java.lang.Long = Packages.java.lang.Long;\nvar ByteOrder: Java.java.nio.ByteOrder = Packages.java.nio.ByteOrder;\nvar ByteBuffer: Java.java.nio.ByteBuffer = Packages.java.nio.ByteBuffer;\nvar Convert: Java.com.heatledger.util.Convert = Packages.com.heatledger.util.Convert;\nvar Crypto2: Java.com.heatledger.crypto.Crypto = Packages.com.heatledger.crypto.Crypto;\nvar Account: Java.com.heatledger.Account = Packages.com.heatledger.Account;",
        "/*\n * The MIT License (MIT)\n * Copyright (c) 2017 Heat Ledger Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * */\ndeclare namespace microservice {\n  interface Config {\n    account: string;\n    settings: lang.IStringHashMap<any>;\n    methods: lang.IStringHashMap<Method>;\n  }\n  interface Method {\n    fee?: string;\n    param?: lang.IStringHashMap<any>;\n  }\n  interface Call {\n    service: string;\n    method: string;\n    param: lang.IStringHashMap<string>;\n  }\n}\n\nmodule microservice {\n\n  /* MicroService annotation */\n  export function MicroService(name: string) {\n    return function (target) {\n      microservice.manager().addService(name, function () {\n        function F(args): void {\n          return target.apply(this, args);\n        }\n        F.prototype = target.prototype;\n        return new F(arguments);\n      });\n    }\n  }  \n\n  /* Base class for all MicroService annotated classes */\n  export abstract class AbstractMicroService {\n    public destroy() {}\n  }  \n\n  /* Access the _manager */\n  export function manager(): ServiceManager {\n    return this['_manager'] || (this['_manager'] = new ServiceManager());\n  }\n\n  class Service {\n    constructor(public name: string, public factory: Function) { }\n  }\n\n  class ServiceManager {\n    private services: lang.IStringHashMap<Service> = {};\n    private running: Array<any> = [];\n\n    /* Add a service, called from MicroService annotation */\n    public addService(name: string, factory: Function) {\n      this.services[name] = new Service(name, factory);\n    }\n\n    /* Tests if a service is registered, called from java */\n    public hasService(name: string): boolean {\n      return !!this.services[name];\n    }    \n\n    /* Create and run a service instance, called from java */\n    public runService(name: string, config: lang.IStringHashMap<any>): number {\n      var service = this.services[name];\n      if (!service) {\n        return 1;\n      }\n      this.running.push(service.factory.call(null, config));\n      return 0;\n    }\n  }\n\n}",
        "/*\n * The MIT License (MIT)\n * Copyright (c) 2017 Heat Ledger Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * */\nmodule subscriber {\n  export var COMPLETE = \"COMPLETE\";\n  export var TRUE = \"TRUE\"\n  export var FALSE = \"FALSE\";\n\n  export function create(serviceId: string) {\n    return new Subscriber(serviceId);\n  }\n\n  class Subscriber {\n    constructor(private serviceId: string) { }\n\n    public payment() {\n      return new PaymentSubscriberBuilder(this.serviceId);\n    }\n\n    public assetTransfer() {\n      return new AssetTransferSubscriberBuilder(this.serviceId);\n    }\n  }\n\n\n  abstract class TransactionSubscriberBuilder {\n    private serviceId: string;\n    private _account: number = 0;\n    private _sender: number = 0;\n    private _recipient: number = 0;\n    private _onAdd: Java.java.util._function.Consumer<Java.com.heatledger.scripting.NativeTransactionEvent> = null;\n    private _onRemove: Java.java.util._function.Consumer<Java.com.heatledger.scripting.NativeTransactionEvent> = null;\n    private _onConfirmed: Java.java.util._function.Consumer<Java.com.heatledger.scripting.NativeTransactionEvent> = null;\n    private _unconfirmed: boolean = false;\n    private _confirmations: number = 0;\n    private _type: number;\n    private _subtype: number;\n\n    constructor(serviceId: string) {\n      this.serviceId = serviceId;\n    }\n\n    public account(account: number) {\n      this._account = account;\n      return this;\n    }\n\n    public sender(sender: number) {\n      this._sender = sender;\n      return this;\n    }\n\n    public recipient(recipient: number) {\n      this._recipient = recipient;\n      return this;\n    }\n\n    public onAdd(onAdd: (event: Java.com.heatledger.scripting.NativeTransactionEvent) => void) {\n      this._onAdd = onAdd;\n      return this;\n    }\n\n    public onRemove(onRemove: (event: Java.com.heatledger.scripting.NativeTransactionEvent) => void) {\n      this._onRemove = onRemove;\n      return this;\n    }\n\n    public onConfirmed(onConfirmed: (event: Java.com.heatledger.scripting.NativeTransactionEvent) => void) {\n      this._onConfirmed = onConfirmed;\n      return this;\n    }\n\n    public unconfirmed(unconfirmed: boolean) {\n      this._unconfirmed = unconfirmed;\n      return this;\n    }\n\n    public confirmations(confirmations: number) {\n      this._confirmations = confirmations;\n      return this;\n    }\n\n    protected type(type: number) {\n      this._type = type;\n      return this;\n    }\n\n    protected subtype(subtype: number) {\n      this._subtype = subtype;\n      return this;\n    }\n\n    public subscribe() {\n      var unsubscribe: Array<Java.java.lang.Runnable> = [];\n      if (util.isDefined(this._onConfirmed)) {\n        unsubscribe.push(this.subscribeConfirmed());\n      }\n      if (util.isDefined(this._onAdd) || util.isDefined(this._onRemove)) {\n        unsubscribe.push(heat.events.subscribeTransaction(this._type, this._subtype, this._account, this._sender, this._recipient, this._unconfirmed, this._onAdd, this._onRemove));\n      }\n      return () => unsubscribe.forEach((fn) => { fn() });\n    }\n\n    private subscribeConfirmed(): Java.java.lang.Runnable {\n      var unsubscribe: Array<Java.java.lang.Runnable> = [];\n      var add = (event: Java.com.heatledger.scripting.NativeTransactionEvent) => {\n\n        /* Always call addTransaction, if already added this operation does nothing */\n        heat.transactionStore.addTransaction(this.serviceId, event.transaction);\n\n        /* Determine if this invocation was completed already, if so exit */\n        if (this.get(event.transaction.id, COMPLETE) == TRUE) {\n          return;\n        }\n\n        var onConfirmed = (event: Java.com.heatledger.scripting.NativeTransactionEvent) => {\n\n          /* Determine if this invocation was completed already, if so exit */\n          if (this.get(event.transaction.id, COMPLETE) == TRUE) {\n            return;\n          }\n\n          /* Call the onConfirmed handler */\n          this._onConfirmed(event);\n        };\n\n        /* Register a listener for when the number of confirmations is reached */\n        heat.transactionStore.registerConfirmedListener(event.transaction.id, this._confirmations, onConfirmed);\n        unsubscribe.push(() => {\n          heat.transactionStore.unRegisterConfirmedListener(event.transaction.id, this._confirmations, onConfirmed);\n        });\n      };\n      unsubscribe.push(heat.events.subscribeTransaction(this._type, this._subtype, this._account, this._sender, this._recipient, this._unconfirmed, add, null));\n      return () => unsubscribe.forEach((fn) => { fn() });\n    }\n\n    public get(transactionId: number, key: string): string {\n      return heat.transactionStore.getEntryValue(this.serviceId, transactionId, key);\n    }\n\n    public put(transactionId: number, key: string, value: string) {\n      return heat.transactionStore.setEntryValue(this.serviceId, transactionId, key, value);\n    }\n  }\n\n  class PaymentSubscriberBuilder extends TransactionSubscriberBuilder {\n    constructor(id) {\n      super(id)\n    }\n    public subscribe() {\n      this.type(0);\n      this.subtype(0);\n      return super.subscribe();\n    }\n  }\n\n  class AssetTransferSubscriberBuilder extends TransactionSubscriberBuilder {\n    constructor(id) {\n      super(id)\n    }\n    public subscribe() {\n      this.type(2);\n      this.subtype(2);\n      return super.subscribe();\n    }\n  }\n\n}",
        "/*\n * The MIT License (MIT)\n * Copyright (c) 2017 Heat Ledger Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * */\nmodule util {\n  export function isDefined(value) {return typeof value !== 'undefined';}\n\n  export function decryptEncryptedMessage(transaction: Java.com.heatledger.Transaction, secretPhrase: string): string {\n    var encryptedData = transaction.encryptedMessage.encryptedData;\n    var privateKey = Crypto2.getPrivateKey(secretPhrase);\n    var bytes = encryptedData.decrypt(privateKey, transaction.senderPublicKey);\n    return Convert.toString(bytes);\n  }\n}",
        "module microservice.sample {\n  @MicroService('sample.service')\n  class SampleService extends AbstractMicroService {\n    constructor(private config: any) {\n      super();\n      console.log(\"Sample microservice says: Hello!\");\n    }\n  }\n}",
        "module microservice.sample {\n  export function test() {\n    microservice.manager().runService('sample.service', {});\n    heat.exit();\n  }\n}"
    ],
    "sourceRoot": "/source/"
}
